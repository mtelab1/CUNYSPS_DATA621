df_num = dfcrashm5  %>% select(where(is.numeric)) %>% names()
#dfcrashm5  = dfcrashm5 %>%
#  mutate(income = sqrt(income),bluebook = log(bluebook) ,travtime = travtime**2)
# dfcrashm5 %>%
#   gather(df_num, key = "var", value = "value") %>%
#   ggplot(aes(x = value, y = dfcrashm5$scale))+
#   geom_point() +
#   facet_wrap(~ var, scales = "free") +
#   ggthemes::theme_fivethirtyeight()
samplelm = lm(scale ~ ., dfcrashm5)
weightlm = glm(samplelm$residuals ~ samplelm$fitted.values)
wts = (weightlm$fitted.values) +abs(min(weightlm$fitted.values))
#+ abs(min(weightlm$fitted.values))
plot(samplelm$fitted.values, wts)
costm5 = lm(scale ~ ., dfcrashm5)
summ(costm5)
plot(costm5)
costm5b <- gam(scale ~ age + sex + mstatus + tif + red_car + car_age + home_val  + parent1 + mstatus + education +
car_use + tif + car_type + oldclaim + revoked + urbanicity +
home_val + job + travtime + bluebook + mvr_pts + clm_freq +
income , wieghts = wts,family=betar(link="logit"), data=dfcrashm5)
summary(costm5b)
plot(predict.gam(costm5b,dfcrash,type="response")*dfcrash$bluebook,dfcrash$target_amt)
# costm5cv <- train(sqrt(scale) ~.,data = dfcrash5,method = "lm",trControl = train_control)
# print(costm5cv)
# plot(costm5cv$finalModel)
# test = test %>%
#   clean_names %>%
#
# flagwinner = model3
# costwinner = costm5b
#
# #
# test$target_flag = predict(flagwinner,test)
# test$target_amt = predict(costwinner,test)
# test$expected_cost = test$target_flag * test$target_amt
submission = df_test %>%
clean_names %>%
mutate(log_bluebook= log(bluebook))%>%
mutate(sqrt_income=sqrt(income))%>%
mutate(scale = pmin(1,target_amt/bluebook))
View(df_test)
submission = test %>%
clean_names %>%
mutate(log_bluebook= log(bluebook))%>%
mutate(sqrt_income=sqrt(income))%>%
mutate(scale = pmin(1,target_amt/bluebook))
View(costm5)
View(test)
submission = test %>%
mutate(scale = pmin(1,target_amt/bluebook))
View(test)
submission = test %>%
clean_names()%>%
mutate(scale = pmin(1,target_amt/bluebook))
submission = test %>%
clean_names()
costwinner = costm5b
submission$target_amt = predict(costwinner,test)
View(submission)
submission = test %>%
clean_names()
costwinner = costm5b
submission$target_amt = predict(costwinner,test)
View(test)
View(submission)
submission = test %>%
clean_names()
costwinner = costm5b
submission$target_amt = predict(costwinner,test)
submission = test %>%
clean_names()
costwinner = costm5b
submission$target_amt = predict(costwinner,submission)
testproc = function(df){
#impute numerical vars using dlookr, methods have been preselected based on initial plots.
car_age<-imputate_na(df, car_age, target_flag, method = "rpart", seed = 999)
#home_val
home_val<-imputate_na(df, home_val, target_flag, method = "rpart")
#yoj
yoj<- imputate_na(df, yoj, target_flag, method = "rpart")
summary(yoj)
# income
income<-imputate_na(df, income, target_flag, method = "rpart")
#age
age<-imputate_na(df, age, method = "rpart")
#build a working dataframe
temp<-cbind(car_age, home_val, yoj, income, age)
temp%<>%as.data.frame(temp)
df%<>%dplyr::select(!c(car_age, home_val, yoj, income, age))%>%
cbind(temp)
df%<>%mutate_if(is.numeric, round)
job<-imputate_na(df, job, method = "mice", seed = 999)
# combine into new df
df<-df%>%dplyr::select(!job)
df<-cbind(df,job)
df$job<-factor(df$job)
return(df)
}
submission = testproc(test)
testproc = function(raw){
raw%<>%clean_names
raw%<>%remove_empty(c("rows", "cols"))
df<-raw%>%
mutate_if(is_character, str_replace_all, '\\$|,|z_|<', '')%>%
mutate_at(c(8,10,17,21), as.numeric)%>%
mutate_at(c(2), as.factor)
# round numeric columns
df%<>%mutate_if(is.numeric, round)
# identify unique values in our character cols
id_distinct <- df%>%
dplyr::select(where(is_character))%>%
map(~str_c(unique(.x),collapse = ",")) %>%
bind_rows() %>%
gather(key = col_name, value = col_unique)
# Update col values for clarity and brevity
df%<>%
mutate_if(is_character, str_replace_all, "No|no",'N')%>%
mutate_if(is_character, str_replace_all, "Yes|yes",'Y')%>%
mutate_if(is_character, str_replace_all, "Highly Urban/ Urban",'Urban')%>%
mutate_if(is_character, str_replace_all, "Highly Rural/ Rural",'Rural')
# convert character cols to factor and set level for education col
df %<>%mutate_if(is_character, ~(factor(.)))
df$education<-factor(df$education, levels=c("High School", "Bachelors", "Masters", "PhD"))
########
#impute numerical vars using dlookr, methods have been preselected based on initial plots.
car_age<-imputate_na(df, car_age, target_flag, method = "rpart", seed = 999)
#home_val
home_val<-imputate_na(df, home_val, target_flag, method = "rpart")
#yoj
yoj<- imputate_na(df, yoj, target_flag, method = "rpart")
summary(yoj)
# income
income<-imputate_na(df, income, target_flag, method = "rpart")
#age
age<-imputate_na(df, age, method = "rpart")
#build a working dataframe
temp<-cbind(car_age, home_val, yoj, income, age)
temp%<>%as.data.frame(temp)
df%<>%dplyr::select(!c(car_age, home_val, yoj, income, age))%>%
cbind(temp)
df%<>%mutate_if(is.numeric, round)
job<-imputate_na(df, job, method = "mice", seed = 999)
# combine into new df
df<-df%>%dplyr::select(!job)
df<-cbind(df,job)
df$job<-factor(df$job)
return(df)
}
submission = testproc(test)
testproc = function(raw){
raw%<>%clean_names
raw%<>%remove_empty(c("rows", "cols"))
df<-raw%>%
mutate_if(is_character, str_replace_all, '\\$|,|z_|<', '')%>%
mutate_at(c(8,10,17,21), as.numeric)%>%
mutate_at(c(2), as.factor)
# round numeric columns
df%<>%mutate_if(is.numeric, round)
# identify unique values in our character cols
id_distinct <- df%>%
dplyr::select(where(is_character))%>%
map(~str_c(unique(.x),collapse = ",")) %>%
bind_rows() %>%
gather(key = col_name, value = col_unique)
# Update col values for clarity and brevity
df%<>%
mutate_if(is_character, str_replace_all, "No|no",'N')%>%
mutate_if(is_character, str_replace_all, "Yes|yes",'Y')%>%
mutate_if(is_character, str_replace_all, "Highly Urban/ Urban",'Urban')%>%
mutate_if(is_character, str_replace_all, "Highly Rural/ Rural",'Rural')
# convert character cols to factor and set level for education col
df %<>%mutate_if(is_character, ~(factor(.)))
df$education<-factor(df$education, levels=c("High School", "Bachelors", "Masters", "PhD"))
########
#impute numerical vars using dlookr, methods have been preselected based on initial plots.
car_age<-imputate_na(df, car_age, target_flag, method = "rpart", seed = 999)
#home_val
home_val<-imputate_na(df, home_val, target_flag, method = "rpart")
#yoj
yoj<- imputate_na(df, yoj, target_flag, method = "rpart")
# income
income<-imputate_na(df, income, target_flag, method = "rpart")
#age
age<-imputate_na(df, age, method = "rpart")
#build a working dataframe
temp<-cbind(car_age, home_val, yoj, income, age)
temp%<>%as.data.frame(temp)
df%<>%dplyr::select(!c(car_age, home_val, yoj, income, age))%>%
cbind(temp)
df%<>%mutate_if(is.numeric, round)
job<-imputate_na(df, job, method = "mice", seed = 999)
# combine into new df
df<-df%>%dplyr::select(!job)
df<-cbind(df,job)
df$job<-factor(df$job)
return(df)
}
submission = testproc(test)
testproc = function(raw){
raw%<>%clean_names
raw%<>%remove_empty(c("rows", "cols"))
df<-raw%>%
mutate_if(is_character, str_replace_all, '\\$|,|z_|<', '')%>%
mutate_at(c(8,10,17,21), as.numeric)%>%
mutate_at(c(2), as.factor)
# round numeric columns
df%<>%mutate_if(is.numeric, round)
# identify unique values in our character cols
id_distinct <- df%>%
dplyr::select(where(is_character))%>%
map(~str_c(unique(.x),collapse = ",")) %>%
bind_rows() %>%
gather(key = col_name, value = col_unique)
# Update col values for clarity and brevity
df%<>%
mutate_if(is_character, str_replace_all, "No|no",'N')%>%
mutate_if(is_character, str_replace_all, "Yes|yes",'Y')%>%
mutate_if(is_character, str_replace_all, "Highly Urban/ Urban",'Urban')%>%
mutate_if(is_character, str_replace_all, "Highly Rural/ Rural",'Rural')
# convert character cols to factor and set level for education col
df %<>%mutate_if(is_character, ~(factor(.)))
df$education<-factor(df$education, levels=c("High School", "Bachelors", "Masters", "PhD"))
########
#impute numerical vars using dlookr, methods have been preselected based on initial plots.
car_age<-imputate_na(df, car_age, target_flag, method = "rpart")
#home_val
home_val<-imputate_na(df, home_val, target_flag, method = "rpart")
#yoj
yoj<- imputate_na(df, yoj, target_flag, method = "rpart")
# income
income<-imputate_na(df, income, target_flag, method = "rpart")
#age
age<-imputate_na(df, age, method = "rpart")
#build a working dataframe
temp<-cbind(car_age, home_val, yoj, income, age)
temp%<>%as.data.frame(temp)
df%<>%dplyr::select(!c(car_age, home_val, yoj, income, age))%>%
cbind(temp)
df%<>%mutate_if(is.numeric, round)
job<-imputate_na(df, job, method = "mice", seed = 999)
# combine into new df
df<-df%>%dplyr::select(!job)
df<-cbind(df,job)
df$job<-factor(df$job)
return(df)
}
submission = testproc(test)
#testproc = function(raw){
raw = test
raw%<>%clean_names
raw%<>%remove_empty(c("rows", "cols"))
df<-raw%>%
mutate_if(is_character, str_replace_all, '\\$|,|z_|<', '')%>%
mutate_at(c(8,10,17,21), as.numeric)%>%
mutate_at(c(2), as.factor)
# round numeric columns
df%<>%mutate_if(is.numeric, round)
# identify unique values in our character cols
id_distinct <- df%>%
dplyr::select(where(is_character))%>%
map(~str_c(unique(.x),collapse = ",")) %>%
bind_rows() %>%
gather(key = col_name, value = col_unique)
# Update col values for clarity and brevity
df%<>%
mutate_if(is_character, str_replace_all, "No|no",'N')%>%
mutate_if(is_character, str_replace_all, "Yes|yes",'Y')%>%
mutate_if(is_character, str_replace_all, "Highly Urban/ Urban",'Urban')%>%
mutate_if(is_character, str_replace_all, "Highly Rural/ Rural",'Rural')
# convert character cols to factor and set level for education col
df %<>%mutate_if(is_character, ~(factor(.)))
df$education<-factor(df$education, levels=c("High School", "Bachelors", "Masters", "PhD"))
########
#impute numerical vars using dlookr, methods have been preselected based on initial plots.
car_age<-imputate_na(df, car_age, target_flag, method = "rpart")
#testproc = function(raw){
raw = test
raw%<>%clean_names
raw%<>%remove_empty(c("rows", "cols"))
df<-raw%>%
mutate_if(is_character, str_replace_all, '\\$|,|z_|<', '')%>%
mutate_at(c(8,10,17,21), as.numeric)%>%
mutate_at(c(2), as.factor)
# round numeric columns
df%<>%mutate_if(is.numeric, round)
# identify unique values in our character cols
id_distinct <- df%>%
dplyr::select(where(is_character))%>%
map(~str_c(unique(.x),collapse = ",")) %>%
bind_rows() %>%
gather(key = col_name, value = col_unique)
# Update col values for clarity and brevity
df%<>%
mutate_if(is_character, str_replace_all, "No|no",'N')%>%
mutate_if(is_character, str_replace_all, "Yes|yes",'Y')%>%
mutate_if(is_character, str_replace_all, "Highly Urban/ Urban",'Urban')%>%
mutate_if(is_character, str_replace_all, "Highly Rural/ Rural",'Rural')
# convert character cols to factor and set level for education col
df %<>%mutate_if(is_character, ~(factor(.)))
df$education<-factor(df$education, levels=c("High School", "Bachelors", "Masters", "PhD"))
########
#impute numerical vars using dlookr, methods have been preselected based on initial plots.
car_age<-imputate_na(df, car_age, target_flag, method = "rpart")
View(raw)
View(test)
raw = test
raw%<>%clean_names
raw%<>%remove_empty(c("rows", "cols"))
View(raw)
#testproc = function(raw){
raw = test
raw%<>%clean_names
df<-raw%>%
mutate_if(is_character, str_replace_all, '\\$|,|z_|<', '')%>%
mutate_at(c(8,10,17,21), as.numeric)%>%
mutate_at(c(2), as.factor)
# round numeric columns
df%<>%mutate_if(is.numeric, round)
# identify unique values in our character cols
id_distinct <- df%>%
dplyr::select(where(is_character))%>%
map(~str_c(unique(.x),collapse = ",")) %>%
bind_rows() %>%
gather(key = col_name, value = col_unique)
# Update col values for clarity and brevity
df%<>%
mutate_if(is_character, str_replace_all, "No|no",'N')%>%
mutate_if(is_character, str_replace_all, "Yes|yes",'Y')%>%
mutate_if(is_character, str_replace_all, "Highly Urban/ Urban",'Urban')%>%
mutate_if(is_character, str_replace_all, "Highly Rural/ Rural",'Rural')
# convert character cols to factor and set level for education col
df %<>%mutate_if(is_character, ~(factor(.)))
df$education<-factor(df$education, levels=c("High School", "Bachelors", "Masters", "PhD"))
########
#impute numerical vars using dlookr, methods have been preselected based on initial plots.
car_age<-imputate_na(df, car_age, target_flag, method = "rpart")
#home_val
home_val<-imputate_na(df, home_val, target_flag, method = "rpart")
#yoj
yoj<- imputate_na(df, yoj, target_flag, method = "rpart")
# income
income<-imputate_na(df, income, target_flag, method = "rpart")
#age
age<-imputate_na(df, age, method = "rpart")
#build a working dataframe
temp<-cbind(car_age, home_val, yoj, income, age)
temp%<>%as.data.frame(temp)
df%<>%dplyr::select(!c(car_age, home_val, yoj, income, age))%>%
cbind(temp)
df%<>%mutate_if(is.numeric, round)
job<-imputate_na(df, job, method = "mice", seed = 999)
# combine into new df
df<-df%>%dplyr::select(!job)
df<-cbind(df,job)
df$job<-factor(df$job)
#return(df)
testproc = function(raw){
raw%<>%clean_names
df<-raw%>%
mutate_if(is_character, str_replace_all, '\\$|,|z_|<', '')%>%
mutate_at(c(8,10,17,21), as.numeric)%>%
mutate_at(c(2), as.factor)
# round numeric columns
df%<>%mutate_if(is.numeric, round)
# identify unique values in our character cols
id_distinct <- df%>%
dplyr::select(where(is_character))%>%
map(~str_c(unique(.x),collapse = ",")) %>%
bind_rows() %>%
gather(key = col_name, value = col_unique)
# Update col values for clarity and brevity
df%<>%
mutate_if(is_character, str_replace_all, "No|no",'N')%>%
mutate_if(is_character, str_replace_all, "Yes|yes",'Y')%>%
mutate_if(is_character, str_replace_all, "Highly Urban/ Urban",'Urban')%>%
mutate_if(is_character, str_replace_all, "Highly Rural/ Rural",'Rural')
# convert character cols to factor and set level for education col
df %<>%mutate_if(is_character, ~(factor(.)))
df$education<-factor(df$education, levels=c("High School", "Bachelors", "Masters", "PhD"))
########
#impute numerical vars using dlookr, methods have been preselected based on initial plots.
car_age<-imputate_na(df, car_age, target_flag, method = "rpart")
#home_val
home_val<-imputate_na(df, home_val, target_flag, method = "rpart")
#yoj
yoj<- imputate_na(df, yoj, target_flag, method = "rpart")
# income
income<-imputate_na(df, income, target_flag, method = "rpart")
#age
age<-imputate_na(df, age, method = "rpart")
#build a working dataframe
temp<-cbind(car_age, home_val, yoj, income, age)
temp%<>%as.data.frame(temp)
df%<>%dplyr::select(!c(car_age, home_val, yoj, income, age))%>%
cbind(temp)
df%<>%mutate_if(is.numeric, round)
job<-imputate_na(df, job, method = "mice", seed = 999)
# combine into new df
df<-df%>%dplyr::select(!job)
df<-cbind(df,job)
df$job<-factor(df$job)
return(df)
}
submission = testproc(test)
submission = test %>%
clean_names()
costwinner = costm5b
submission$target_amt = predict(costwinner,submission)
submission$target_amt = predict(costwinner,submission)
submission$target_amt = predict.gam(costm5b,submission,type="response")
submission$target_amt = predict.gam(costm5b,submission,type="response")
submission$target_amt = predict.gam(costm5b,submission,type="response")
summary(submission)
testproc = function(raw){
raw%<>%clean_names
df<-raw%>%
mutate_if(is_character, str_replace_all, '\\$|,|z_|<', '')%>%
mutate_at(c(8,10,17,21), as.numeric)%>%
mutate_at(c(2), as.factor)
# round numeric columns
df%<>%mutate_if(is.numeric, round)
# identify unique values in our character cols
id_distinct <- df%>%
dplyr::select(where(is_character))%>%
map(~str_c(unique(.x),collapse = ",")) %>%
bind_rows() %>%
gather(key = col_name, value = col_unique)
# Update col values for clarity and brevity
df%<>%
mutate_if(is_character, str_replace_all, "No|no",'N')%>%
mutate_if(is_character, str_replace_all, "Yes|yes",'Y')%>%
mutate_if(is_character, str_replace_all, "Highly Urban/ Urban",'Urban')%>%
mutate_if(is_character, str_replace_all, "Highly Rural/ Rural",'Rural')
# convert character cols to factor and set level for education col
df %<>%mutate_if(is_character, ~(factor(.)))
df$education<-factor(df$education, levels=c("High School", "Bachelors", "Masters", "PhD"))
########
#impute numerical vars using dlookr, methods have been preselected based on initial plots.
df$car_age[df$car_age < 0] <- NA
car_age<-imputate_na(df, car_age, target_flag, method = "rpart")
#home_val
home_val<-imputate_na(df, home_val, target_flag, method = "rpart")
#yoj
yoj<- imputate_na(df, yoj, target_flag, method = "rpart")
# income
income<-imputate_na(df, income, target_flag, method = "rpart")
#age
age<-imputate_na(df, age, method = "rpart")
#build a working dataframe
temp<-cbind(car_age, home_val, yoj, income, age)
temp%<>%as.data.frame(temp)
df%<>%dplyr::select(!c(car_age, home_val, yoj, income, age))%>%
cbind(temp)
df%<>%mutate_if(is.numeric, round)
job<-imputate_na(df, job, method = "mice", seed = 999)
# combine into new df
df<-df%>%dplyr::select(!job)
df<-cbind(df,job)
df$job<-factor(df$job)
return(df)
}
submission = testproc(test)
submission$target_amt = predict.gam(costm5b,submission,type="response")
View(submission)
submission$target_amt = predict.gam(costm5b,submission,type="response")*submission$bluebook
View(submission)
plot(submission$target_amt)
hist(submission$target_amt\)
hist(submission$target_amt)
hist(exp(submission$target_amt))
exp(submission$target_amt)
submission$target_amt
?exp
costm5b <- gam(sqrt(scale) ~ age + sex + mstatus + tif + red_car + car_age + home_val  + parent1 + mstatus + education +
car_use + tif + car_type + oldclaim + revoked + urbanicity +
home_val + job + travtime + bluebook + mvr_pts + clm_freq +
income , wieghts = wts,family=betar(link="logit"), data=dfcrashm5)
summary(costm5b)
plot(predict.gam(costm5b,dfcrash,type="response")*dfcrash$bluebook,dfcrash$target_amt)
submission$target_amt = predict.gam(costm5b,submission,type="response")*submission$bluebook
hist(submission$target_amt)
hist(dftarget_amt)
hist(df$target_amt)
submission$target_amt = predict.gam(costm5b,submission,type="response")*submission$bluebook
costm5b <- gam(scale**2 ~ age + sex + mstatus + tif + red_car + car_age + home_val  + parent1 + mstatus + education +
car_use + tif + car_type + oldclaim + revoked + urbanicity +
home_val + job + travtime + bluebook + mvr_pts + clm_freq +
income , wieghts = wts,family=betar(link="logit"), data=dfcrashm5)
summary(costm5b)
plot(predict.gam(costm5b,dfcrash,type="response")*dfcrash$bluebook,dfcrash$target_amt)
submission$target_amt = predict.gam(costm5b,submission,type="response")*submission$bluebook
hist(submission$target_amt)
hist(dfpreserve$target_amt)
hist(submission$target_amt)
?possion
submission$target_amt = predict(costm5b,submission,type="response")*submission$bluebook
hist(submission$target_amt)
costm5b <- gam(log(scale) ~ age + sex + mstatus + tif + red_car + car_age + home_val  + parent1 + mstatus + education +
car_use + tif + car_type + oldclaim + revoked + urbanicity +
home_val + job + travtime + bluebook + mvr_pts + clm_freq +
income , wieghts = wts,family=betar(link="logit"), data=dfcrashm5)
costm5b <- gam(scale ~ age + sex + mstatus + tif + red_car + car_age + home_val  + parent1 + mstatus + education +
car_use + tif + car_type + oldclaim + revoked + urbanicity +
home_val + job + travtime + bluebook + mvr_pts + clm_freq +
income , wieghts = wts,family=betar(link="logit"), data=dfcrashm5)
summary(costm5b)
plot(predict.gam(costm5b,dfcrash,type="response")*dfcrash$bluebook,dfcrash$target_amt)
hist(predict.gam(costm5b,dfcrash,type="response"))
plot(predict.gam(costm5b,dfcrash,type="response"),dfcrash$target_amt)
plot(predict.gam(costm5b,dfcrash,type="response"),log(dfcrash$target_amt))
plot(predict.gam(costm5b,dfcrash,type="response"),dfcrash$target_amt)
